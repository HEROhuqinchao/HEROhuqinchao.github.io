<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SJのBlog</title>
  
  <subtitle>构建温馨的小窝</subtitle>
  <link href="https://herohuqinchao.github.io/atom.xml" rel="self"/>
  
  <link href="https://herohuqinchao.github.io/"/>
  <updated>2022-04-06T07:28:55.837Z</updated>
  <id>https://herohuqinchao.github.io/</id>
  
  <author>
    <name>SJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Xcode编写Swift FrameWork</title>
    <link href="https://herohuqinchao.github.io/post/546191697/"/>
    <id>https://herohuqinchao.github.io/post/546191697/</id>
    <published>2022-04-06T06:58:46.000Z</published>
    <updated>2022-04-06T07:28:55.837Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="iOS-FrameWork-制作"><a href="#iOS-FrameWork-制作" class="headerlink" title="iOS FrameWork 制作"></a>iOS FrameWork 制作</h1><h2 id="一-创建-FrameWork-工程"><a href="#一-创建-FrameWork-工程" class="headerlink" title="一 创建 FrameWork 工程"></a>一 创建 FrameWork 工程</h2><p>运行 XCode -&gt; Cocoa Touch Framework -&gt; 取个名, 语言选择 Swift -&gt; 创建成功</p><h2 id="二-基本设置"><a href="#二-基本设置" class="headerlink" title="二 基本设置"></a>二 基本设置</h2><ol><li>build setting -&gt;  Mach-O Type -&gt;  Dyanmic Library</li><li>build setting -&gt; Build Active Architecture Only -&gt; NO</li><li>build setting -&gt; Dead Code Stripping -&gt; NO</li><li>build 环境设置为 release</li></ol><h2 id="三-编写内容代码文件"><a href="#三-编写内容代码文件" class="headerlink" title="三 编写内容代码文件"></a>三 编写内容代码文件</h2><ol><li>删除自动生成的 project.h 头文件 </li><li>写入自己SDK内容代码 </li></ol><h2 id="四-设置开放文件"><a href="#四-设置开放文件" class="headerlink" title="四 设置开放文件"></a>四 设置开放文件</h2><ol><li>文件暴露 -&gt; 将开放文件放入 build phases -&gt; Headers -&gt; Public 中</li><li>方法暴露 -&gt; 将方法前加入 public 字段 </li><li>适用于 OC 项目 还需添加 @objc 字段<h2 id="五-编译运行"><a href="#五-编译运行" class="headerlink" title="五 编译运行"></a>五 编译运行</h2>Products 文件夹下使用</li></ol><h2 id="六-合并包"><a href="#六-合并包" class="headerlink" title="六 合并包"></a>六 合并包</h2><ol><li>将生成的真机包和模拟器包放入自定义文件夹中</li><li>使用终端 命令行 lipo -info 查看 包的架构<br>如下显示：（示例为谷歌webrtc文件）<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">******@Mac-mini ~ % lipo -info <span class="hljs-regexp">/Users/</span>******<span class="hljs-regexp">/Documents/</span>文稿\ -\ ***的Mac\ mini<span class="hljs-regexp">/WebRTCSDK/</span>bak<span class="hljs-regexp">/WebRTC.framework/</span>WebRTC<br>Architectures in the fat <span class="hljs-keyword">file</span>: <span class="hljs-regexp">/Users/</span>huqinchao<span class="hljs-regexp">/Documents/</span>文稿 - ***的Mac mini<span class="hljs-regexp">/WebRTCSDK/</span>bak<span class="hljs-regexp">/WebRTC.framework/</span>WebRTC are: armv7 x86_64 i386 arm64 <br>******@Mac-mini ~ % <br></code></pre></td></tr></table></figure></li><li>Xcode 新版会生成两个含有相同架构的framework 需要自行剔除分解 arm64, x86_64, i386, armv7 架构</li><li>命令如下：<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">cd （自定义文件夹）<br>mkdir ./bak<br>cp -r XXXX.framework ./bak<br>lipo XXXX.framework/XXXX -thin armv7 -<span class="hljs-keyword">output</span> XXXX_armv7<br>lipo XXXX.framework/XXXX -thin arm64 -<span class="hljs-keyword">output</span> XXXX_arm64<br>lipo XXXX.framework/XXXX -thin x86_64 -<span class="hljs-keyword">output</span> XXXX_x86_64<br>lipo XXXX.framework/XXXX -thin i386 -<span class="hljs-keyword">output</span> XXXX_i386<br>lipo -<span class="hljs-keyword">create</span> XXXX_armv7 XXXX_arm64 -<span class="hljs-keyword">output</span> XXXX_1     ——&gt;真机版本剔除X86_64/i386<br>lipo -<span class="hljs-keyword">create</span> XXXX_x86_64 XXXX_i386 -<span class="hljs-keyword">output</span> XXXX _2     ——&gt;模拟器版本剔除arm64<br>lipo -<span class="hljs-keyword">create</span> XXXX _2 XXXX _2 -<span class="hljs-keyword">output</span> XXXX                     ——&gt;合并真机模拟器包 <br>mv XXXX XXXX.framework/                                              ——&gt;移动到 .framework/ 文件夹内 <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Swift" scheme="https://herohuqinchao.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 11 以上不显示Products 解决办法</title>
    <link href="https://herohuqinchao.github.io/post/1302214085/"/>
    <id>https://herohuqinchao.github.io/post/1302214085/</id>
    <published>2022-04-06T06:46:13.000Z</published>
    <updated>2022-04-06T06:58:03.002Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h1><p>Xcode11+  ‘Per-configuration Build Products Path’ (最终文件路径) 没了 </p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>Build Settings -&gt; 点击 ➕ 添加 -&gt; User-Defined  添加一行 </p><table><thead><tr><th>Setting</th><th>自定义文件路径</th></tr></thead><tbody><tr><td>CONFIGURATION_BUILD_DIR</td><td>/Users/¥¥¥/Desktop/</td></tr></tbody></table><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>打开项目 找到目标 项目名称.xcodeproj 右键点击显示包内容 -&gt; 打开project.pbxproj文件 -&gt; 全局搜索 productRefGroup关键字 找到如下显示内容 ： </p><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">mainGroup</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>F5229D27339ED90048642D<span class="hljs-comment">;</span><br><span class="hljs-attribute">productRefGroup</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>F522A727339ED90048642D /* Products */<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>将上面 mainGroup 对应的值复制给 productRefGroup 的值 如下 ：</p><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">mainGroup</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>F5229D27339ED90048642D<span class="hljs-comment">;</span><br><span class="hljs-attribute">productRefGroup</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>F5229D27339ED90048642D /* Products */<br></code></pre></td></tr></table></figure><p> 保存文件 此刻Xcode 就自动加载出来  Products 文件夹了 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Xcode" scheme="https://herohuqinchao.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC使用</title>
    <link href="https://herohuqinchao.github.io/post/2123500015/"/>
    <id>https://herohuqinchao.github.io/post/2123500015/</id>
    <published>2022-03-23T07:33:05.000Z</published>
    <updated>2022-03-23T07:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="webrtc-mirror"><a href="#webrtc-mirror" class="headerlink" title="webrtc-mirror"></a>webrtc-mirror</h1><p>WebRTC国内加速镜像 <a href="https://github.com/webrtc-mirror/mirror">https://github.com/webrtc-mirror/mirror</a></p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>在进行WebRTC开发的时候经常需要编译WebRTC，但由于WebRTC依赖较多（十几个G）， 而且大多数内容需要翻墙。 我们尝试了多种加速编译的方法，最终找到一个对WebRTC代码没有任何侵入的镜像方案。<br>相信行业内的很多人都体验过WebRTC编译的痛苦，尤其是新接触WebRTC的人，我们决定提供这个WebRTC镜像的方案。快乐自己造福大家。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>WebRTC的依赖主要分为三类:</p><p>1，放在git中的代码，这部分大概有三十多个仓库， <code>gcient sync</code> 会把这些git仓库的历史记录都拉下来，所以有的厂库会非常大，这些代码大都在google code上， 在镜像的时候我们把这些git代码同步到了gitlab， 之所以放到gitlab上是因为github上对仓库大小会做限制，导致有些代码同步不成功。这些依赖会10分钟同步一次，保持跟google code上代码仓库保持一致。</p><p>2，cipd的模块代码， 这部分代码放在appspot.com上面，这部分代码不好做镜像，可以通过采用http代理的方式来进行下载。</p><p>3，google storage上的依赖， google storage上的内容非常庞大， 不好做镜像， 可以通过采用http代理的方式进行下载。</p><p>在同步WebRTC的依赖过程中，git中的代码会从gitlab相对应的仓库中拉取， 不好镜像的部分我们提供了http代理进行下载。</p><h2 id="镜像说明"><a href="#镜像说明" class="headerlink" title="镜像说明"></a>镜像说明</h2><ul><li>对WebRTC源码不做任何修改</li><li>每十分钟和官方代码同步一次</li></ul><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li>我们的镜像方案参考了声网的方案，具体可以看 <a href="https://rtcdeveloper.com/t/topic/14914">https://rtcdeveloper.com/t/topic/14914</a></li><li>感谢gitlab承载了部分webrtc代码和第三方依赖的代码，<a href="https://gitlab.com/webrtc-mirror">https://gitlab.com/webrtc-mirror</a>  </li></ul><h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h2><h4 id="替换git仓库地址"><a href="#替换git仓库地址" class="headerlink" title="替换git仓库地址"></a>替换git仓库地址</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>webrtc.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/</span>webrtc.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>base.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src/base<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>build.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src/build<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>buildtools.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src/buildtools<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/g</span>radle.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/gradle/g</span>radle.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/i</span>os.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src/ios.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>testing.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src/testing<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>third_party.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src/third_party<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>clang-format.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>llvm-project<span class="hljs-regexp">/cfe/</span>tools/clang-format.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>libcxx.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>llvm-project/libcxx.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>libcxxabi.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>llvm-project/libcxxabi.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>libunwind.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/</span>llvm.org/libunwind.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>android_ndk.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com/android_ndk.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>android_tools.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com/android_tools.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>auto.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/google/</span>auto.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>catapult.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com/catapult.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>compact_enc_det.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/google/</span>compact_enc_det.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>colorama.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/</span>colorama.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>depot_tools.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>tools/depot_tools.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>errorprone.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>third_party/errorprone.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>ffmpeg.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>third_party/ffmpeg.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>findbugs.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>deps/findbugs.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>freetype2.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src<span class="hljs-regexp">/third_party/</span>freetype2.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>harfbuzz.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/harfbuzz/</span>harfbuzz.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/g</span>test-parallel.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/google/g</span>test-parallel<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/g</span>oogletest.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/google/g</span>oogletest.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/i</span>cu.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>deps/icu.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>jsr-<span class="hljs-number">305</span>.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/</span>jsr-<span class="hljs-number">305</span>.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>jsoncpp.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/open-source-parsers/</span>jsoncpp.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>junit.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/</span>junit.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>fuzzer.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>llvm-project<span class="hljs-regexp">/compiler-rt/</span>lib/fuzzer.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>libjpeg_turbo.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>deps/libjpeg_turbo.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>libsrtp.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>deps/libsrtp.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>libvpx.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/webm/</span>libvpx.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>libyuv.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/libyuv/</span>libyuv.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>linux-syscall-support.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com/linux-syscall-support.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/m</span>ockito.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/m</span>ockito/mockito.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>nasm.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>deps/nasm.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>openh264.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/cisco/</span>openh264<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>requests.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/kennethreitz/</span>requests.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>robolectric.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/</span>robolectric.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/u</span>b-uiautomator.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>third_party/ub-uiautomator.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/u</span>srsctp.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/gi</span>thub.com<span class="hljs-regexp">/sctplab/u</span>srsctp<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>binaries.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>deps<span class="hljs-regexp">/yasm/</span>binaries.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>patched-yasm.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>deps<span class="hljs-regexp">/yasm/</span>patched-yasm.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>tools.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>src/tools<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>client-py.git.insteadOf https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/infra/</span>luci/client-py.git<br>git config --global url.https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/webrtc-mirror/</span>boringssl.git.insteadOf https:<span class="hljs-regexp">//</span>boringssl.googlesource.com/boringssl.git<br></code></pre></td></tr></table></figure><h4 id="安装depot-tools"><a href="#安装depot-tools" class="headerlink" title="安装depot_tools"></a>安装depot_tools</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> WORKSPACE=$(<span class="hljs-built_in">pwd</span>)<br>git <span class="hljs-built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$WORKSPACE</span>/depot_tools:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><h4 id="配置http和https代理"><a href="#配置http和https代理" class="headerlink" title="配置http和https代理"></a>配置http和https代理</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> http和https代理服务，因为是代理外网服务，有可能出现间歇性的不稳定，如果不工作可以提issuse<br><span class="hljs-regexp">//</span> 请不要滥用该http和https代理服务，后面会加上黑名单服务<br><br>export http_proxy=http:<span class="hljs-regexp">//</span><span class="hljs-number">39.105</span>.<span class="hljs-number">13.136</span>:<span class="hljs-number">8080</span><br>export https_proxy=http:<span class="hljs-regexp">//</span><span class="hljs-number">39.105</span>.<span class="hljs-number">13.136</span>:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h4 id="同步WebRTC"><a href="#同步WebRTC" class="headerlink" title="同步WebRTC"></a>同步WebRTC</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">gclient config --name src https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/external/</span>webrtc.git<br><br>gclient sync <br></code></pre></td></tr></table></figure><h4 id="编译WebRTC"><a href="#编译WebRTC" class="headerlink" title="编译WebRTC"></a>编译WebRTC</h4><p>mac平台</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> src<br><br><span class="hljs-comment">// 可以加入其它的编译参数</span><br>gn <span class="hljs-keyword">gen</span>  <span class="hljs-keyword">out</span>/<span class="hljs-keyword">mac</span> --<span class="hljs-keyword">args</span>=&#x27;is_debug=false target_cpu=<span class="hljs-string">&quot;x64&quot;</span> rtc_include_tests=false rtc_build_tools=false rtc_build_examples=false&#x27;<br><br><span class="hljs-comment">// mac_framework_objc 为framework， 可以为其它的target</span><br>ninja -C <span class="hljs-keyword">out</span>/<span class="hljs-keyword">mac</span>  mac_framework_objc<br></code></pre></td></tr></table></figure><p>iOS平台</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> src<br><br>python tools_webrtc/ios/build_ios_libs.py  --output-dir  out/ios  --<span class="hljs-built_in">arch</span> arm64  --extra-gn-args rtc_include_tests=<span class="hljs-literal">false</span> rtc_build_tools=<span class="hljs-literal">false</span> rtc_build_examples=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>Linux平台</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> src<br><br><span class="hljs-string">//</span> 安装依赖<br>bash build/install-build-deps.sh <br><br><span class="hljs-string">//</span> 可以加入其它的编译参数<br>gn gen  out/linux <span class="hljs-params">--args=</span>&#x27;is_debug=<span class="hljs-literal">false</span> target_cpu=<span class="hljs-string">&quot;x64&quot;</span> rtc_include_tests=<span class="hljs-literal">false</span> rtc_build_tools=<span class="hljs-literal">false</span> rtc_build_examples=<span class="hljs-literal">false</span>&#x27;<br><br><br>ninja -C out/linux <br></code></pre></td></tr></table></figure><p>Android 平台（须在linux平台上编译）</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><br><span class="hljs-comment"># 添加安卓平台</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;target_os = [ &#x27;android&#x27; ]&quot;</span> &gt;&gt;  <span class="hljs-string">.gclient</span><br><br>gclient sync <br><br><span class="hljs-keyword">cd</span> src<br><br><span class="hljs-string">//</span> 安装android依赖<br><span class="hljs-string">./build/install-build-deps-android.sh</span><br><br>python tools_webrtc/android/build_aar.py  <span class="hljs-params">--build-dir</span> out/android  <span class="hljs-params">--arch</span> armeabi-v7a   <span class="hljs-params">--extra-gn-args</span> rtc_include_tests=<span class="hljs-literal">false</span> rtc_build_tools=<span class="hljs-literal">false</span> rtc_build_examples=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>Windows 平台</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><br>gn <span class="hljs-keyword">gen</span> <span class="hljs-keyword">out</span>/<span class="hljs-keyword">Win</span>  --<span class="hljs-keyword">args</span>=&#x27;proprietary_codecs=true  is_debug=false target_cpu=<span class="hljs-string">&quot;x86&quot;</span>  ffmpeg_branding=<span class="hljs-string">&quot;Chrome&quot;</span> rtc_include_tests=false&#x27;<br><br>ninja -C <span class="hljs-keyword">out</span>/<span class="hljs-keyword">Win</span><br><br></code></pre></td></tr></table></figure><h4 id="清空http和https代理"><a href="#清空http和https代理" class="headerlink" title="清空http和https代理"></a>清空http和https代理</h4><p>由于对http和https代理做了相应的白名单处理， 使用该http代理后访问其它的网站会被禁止， 在编译完WebRTC需要把http和https代理设置为空</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>为了加快下载和编译我们目前禁止掉了测试文件的下载， 所以在编译的时候请加上 <code>rtc_include_tests=false</code></li><li>为了节省代理流量，我们对通过代理的域名进行了过滤，只允许WebRTC相关域名通过</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="WebRTC" scheme="https://herohuqinchao.github.io/tags/WebRTC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的基本使用</title>
    <link href="https://herohuqinchao.github.io/post/2602165680/"/>
    <id>https://herohuqinchao.github.io/post/2602165680/</id>
    <published>2022-03-17T02:54:49.000Z</published>
    <updated>2022-03-23T07:52:46.036Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</p><h2 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h2><p>安装使用hexo之前需要先安装Node.js和Git，当已经安装了Node.js和npm(npm是node.js的包管理工具)，可以通过以下命令安装hexo</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>可以通过以下命令查看主机中是否安装了node.js和npm</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">--version</span>    <span class="hljs-comment">#检查是否安装了node.js</span><br>$ npm --<span class="hljs-keyword">version</span>     <span class="hljs-comment">#检查是否安装了npm</span><br></code></pre></td></tr></table></figure><p>如下所示表示已经安装了node.js和npm</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@***:~# node --version<br><span class="hljs-attribute">v8</span>.<span class="hljs-number">11</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">root</span>@***:~# npm --version<br><span class="hljs-attribute">6</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="3-建站"><a href="#3-建站" class="headerlink" title="3. 建站"></a>3. 建站</h2><p>安装完Hexo之后，执行下列命令，Hexo将会在指定目录中新建所需要的文件，指定的目录即为Hexo的工作站</p><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>新建完成之后，指定目录中的情况如下</p><figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf">├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><h3 id="3-1-config-yml"><a href="#3-1-config-yml" class="headerlink" title="3.1. _config.yml"></a>3.1. _config.yml</h3><p>网站的配置信息，您可以在此配置大部分的参数。</p><h3 id="3-2-package-json"><a href="#3-2-package-json" class="headerlink" title="3.2. package.json"></a>3.2. package.json</h3><p>应用程序的信息，以及需要安装的模块信息。</p><h3 id="3-3-scaffolds"><a href="#3-3-scaffolds" class="headerlink" title="3.3. scaffolds"></a>3.3. scaffolds</h3><p>模版文件夹。新建文章时，Hexo 会根据 scaffold 中的模板文件来建立新的文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。也就是说，通过hexo命令每新建一个文章，都会包含指定模板文件中的内容。</p><h3 id="3-4-source"><a href="#3-4-source" class="headerlink" title="3.4. source"></a>3.4. source</h3><p>资源文件夹是存放用户资源的地方，如markdown文章。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><p>注意：除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。</p><h3 id="3-5-themes"><a href="#3-5-themes" class="headerlink" title="3.5. themes"></a>3.5. themes</h3><p>主题文件夹。Hexo 会根据主题来解析source目录中的markdown文件生成静态页面。官网主题详述</p><h2 id="4-写作"><a href="#4-写作" class="headerlink" title="4. 写作"></a>4. 写作</h2><p>可以执行下列命令来创建一篇新文章。</p><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>可以在命令中指定文章的布局（layout），不指定默认为 post，也可以通过修改 _config.yml 中的 <code>default_layout</code> 参数来指定默认布局。创建的新文章会自动加上指定布局对应的模板文件中的内容。</p><h3 id="4-1-布局（Layout）"><a href="#4-1-布局（Layout）" class="headerlink" title="4.1. 布局（Layout）"></a>4.1. 布局（Layout）</h3><p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><p>布局路径<code>postsource/_postspagesourcedraftsource/_drafts</code></p><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p><h3 id="4-2-模版（Scaffold）"><a href="#4-2-模版（Scaffold）" class="headerlink" title="4.2. 模版（Scaffold）"></a>4.2. 模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-type">photo</span> <span class="hljs-string">&quot;My Gallery&quot;</span><br></code></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><p>变量描述layout布局title标题date文件建立日期</p><h3 id="4-3-Front-matter"><a href="#4-3-Front-matter" class="headerlink" title="4.3. Front-matter"></a>4.3. Front-matter</h3><p>Front-matter是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>注意：一般Front-matter使用的yaml语法，yaml语法需要注意空格，如title: Hello World冒号需要有一个空格，当然除YAML 外，你也可以使用 JSON 来编写 Front-matter。<br>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数描述默认值layout布局title标题date建立日期文件建立日updated更新日期文件更新日期comments开启文章的评论功能truetags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址</p><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><p>WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法： categories:<br>Diary<br>Life<br>会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类.</p><h3 id="4-4-文章摘要"><a href="#4-4-文章摘要" class="headerlink" title="4.4. 文章摘要"></a>4.4. 文章摘要</h3><p>设置文章摘要，我们只需在想显示为摘要的内容之后添 <code>&lt;!-- more --&gt;</code> 即可。像下面这样：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">hello</span> <span class="hljs-string">hexo</span> <span class="hljs-string">markdown</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2016-11-16 18:11:25</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hello</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">markdown</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>我是短小精悍的文章摘要(๑•̀ㅂ•́) ✧</p><p><code>&lt;!-- more --&gt;</code></p><p>紧接着文章摘要的正文内容</p><p>这样，<code>&lt;!-- more --&gt;</code> 之前、文档配置参数之后中的内容便会被渲染为站点中的文章摘要。</p><p>注意！文章摘要在文章详情页是正文中最前面的内容。</p><h3 id="4-5-资源引用"><a href="#4-5-资源引用" class="headerlink" title="4.5. 资源引用"></a>4.5. 资源引用</h3><p>写个博客，有时候会想添加个图片或者其他形式的资源等等。有以下两种方式进行解决：</p><p>使用绝对路径引用资源，在 Web 世界中就是资源的 URL<br>使用相对路径引用资源<br>对于使用相对路径引用资源的，我们可以使用 Hexo 提供的资源文件夹功能。</p><p>使用文本编辑器打开站点根目录下的 _ config.yml 文件，将 <code>post_asset_folder</code> 值设置为 true。</p><p><code>post_asset_folder: true</code><br>修改之后会开启 Hexo 的文章资源文件管理功能。Hexo 将会在我们每一次通过 <code>hexo new &lt;title&gt;</code> 命令创建新文章时自动创建一个同名文件夹，于是我们便可以将文章所引用的相关资源放到这个同名文件夹下，然后通过相对路径引用。例如，你把一个 example.jpg 图片放在了这个同名文件夹中，使用相对路径的常规 markdown 语法 <code>![](./example.jpg)</code>即可访问 。</p><h2 id="5-网站发布"><a href="#5-网站发布" class="headerlink" title="5. 网站发布"></a>5. 网站发布</h2><p>首先执行下列命令生成相应的静态网页，生成的静态网页以及相关资源都会在public目录下</p><figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><h3 id="5-1-用hexo-server"><a href="#5-1-用hexo-server" class="headerlink" title="5.1. 用hexo-server"></a>5.1. 用hexo-server</h3><p>hexo-server模块的主要命令如下，输入以下命令以启动服务器，您的网站会在 <a href="http://localhost:4000/">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下：</p><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span> -p <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><p>但是个人认为此方式比较适合用于调试网站，并不适合长时间的网站服务器，同时为了让这个命令在后台长时间运行，需要编写相应的脚本。</p><h3 id="5-2-部署到Git上"><a href="#5-2-部署到Git上" class="headerlink" title="5.2. 部署到Git上"></a>5.2. 部署到Git上</h3><p>这个暂时没有尝试过，但是网络上很多都是关于部署到Git上的，可以自行谷歌或百度。</p><h3 id="5-3-部署到Apache或者Nginx上"><a href="#5-3-部署到Apache或者Nginx上" class="headerlink" title="5.3. 部署到Apache或者Nginx上"></a>5.3. 部署到Apache或者Nginx上</h3><p>通过<code>hexo g</code>命令生成的都是静态网页，可以把生成的public目录中的文件，全都拷贝到网站根目录，然后启动apache或者nginx服务。</p><h2 id="6-其他基础命令"><a href="#6-其他基础命令" class="headerlink" title="6. 其他基础命令"></a>6. 其他基础命令</h2><h3 id="6-1-清除缓存文件"><a href="#6-1-清除缓存文件" class="headerlink" title="6.1. 清除缓存文件"></a>6.1. 清除缓存文件</h3><p>为了避免不必要的错误，在生成静态文件前，强烈建议先运行以下命令：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>上述命令会清除本地站点文件夹下的缓存文件（db.json）和已有的静态文件（public）。</p><h3 id="简写如下"><a href="#简写如下" class="headerlink" title="简写如下"></a>简写如下</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo cl  <br><span class="hljs-variable">$ </span>hexo d -g   <br><span class="hljs-variable">$ </span>hexo server  <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="博客" scheme="https://herohuqinchao.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>面试题（一）</title>
    <link href="https://herohuqinchao.github.io/post/950528940/"/>
    <id>https://herohuqinchao.github.io/post/950528940/</id>
    <published>2022-03-16T01:43:15.000Z</published>
    <updated>2022-03-23T07:49:35.477Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="谈谈Runtime"><a href="#谈谈Runtime" class="headerlink" title="谈谈Runtime"></a>谈谈Runtime</h2><p>OC是一门动态性比较强的编程语言，允许很多操作推迟到程序运行时再进行<br>OC的动态性就是由Runtime来支撑和实现的，Runtime是一套C语言的API，封装了很多动态性相关的函数<br>平时编写的OC代码，底层都是转换成了Runtime API进行调用</p><p>利用如time我们可以做很多事情 如</p><ol><li>   利用关联对象（AssociatedObject）给分类添加属性</li><li>   遍历类的所有成员变量（修改textfield的占位文字颜色、字典转模型、自动归档解档）</li><li>   交换方法实现（交换系统的方法）</li><li>   利用消息转发机制解决方法找不到的异常问题<br>OC中方法的调用都是转化为objc_msgSend函数的调用<br><code>objc_msgSend</code>函数可以分为三个阶段</li></ol><p>第一个阶段是：消息发送阶段<br>首先判断消息的接受者是否存在 如果不存在则直接返回如果存在则 从自己类的方法缓存列表中查找该方法，如果存在则执行 如果不存在则去自己类的方法列表中查找，如果存在则缓存到自己类的方法缓存列表中 然后在执行，如果不存在则去父类的方法缓存列表中查找，如果存在则缓存到自己类的方法缓存列表中 然后执行，如果不存在 则去父父类的方法列表中查找，如果存在 则缓存到自己类的方法缓存列表中， 如果不存在则进入第二不 方法动态解析阶段</p><p>第二阶段是：方法动态解析阶段<br>首先判断方法是否动态解析过，如果之前已经有过动态解析 则直接进入第一步消息发送阶段<br>如果没有过动态解析则调用+resolveInstanceMethod：或则+resoveClassMethod：方法来动态解析 然后标记为已经动态解析 最后重新走“消息发送”的流程<br>在此阶段 我们可以添加一个新的方法来代替原来的方法 如果在此阶段不做任何处理 则直接进入第三步 消息转发阶段</p><p>第三阶段是：消息转发阶段</p><ol><li>   首先调用forwardingTargetForSelector:方法 在此方法中：如果返回值不为空 则直接给返回值转发消息<br>如果返回值为空否则进入第2步 调用方法签名函数</li><li>   调用methodSignatureForSelector:方法（方法签名函数）在此方法中：<br>如果返回值为空 则直接调用 调用doesNotRecognizeSelector:方法 然后程序报错：unrecognized selector sent to instance 经典错误<br>如果返回值不为空 则直接进入第3步 调用 forwardInvocation方法</li><li>   forwardInvocation：方法<br>开发人员可以在此方法中处理调用的方法</li></ol><h2 id="谈谈Runloop"><a href="#谈谈Runloop" class="headerlink" title="谈谈Runloop"></a>谈谈Runloop</h2><p>顾名思义就是运行循环，在程序运行过程中循环做一些事情</p><ol><li>   保持程序的持续运行</li><li>   处理App中的各种事件（比如触摸事件、定时器事件等）</li><li>   节省CPU资源，提高程序性能：该做事时做事，该休息时休息</li></ol><h2 id="runloop与线程之间的关系"><a href="#runloop与线程之间的关系" class="headerlink" title="runloop与线程之间的关系"></a>runloop与线程之间的关系</h2><ol><li>   每条线程都有唯一的一个与之对应的RunLoop对象</li><li>   RunLoop保存在一个全局的Dictionary里，线程作为key，RunLoop作为value</li><li>   线程刚创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建（[NSRunLoop currentRunLoop]）</li><li>   RunLoop会在线程结束时销毁</li><li>   主线程的RunLoop已经自动获取（创建），子线程默认没有开启RunLoop</li></ol><h2 id="获取runloop对象的方法"><a href="#获取runloop对象的方法" class="headerlink" title="获取runloop对象的方法"></a>获取runloop对象的方法</h2><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[NSRunLoop currentRunLoop]</span>; <span class="hljs-comment">// 获得当前线程的RunLoop对象</span><br><span class="hljs-selector-attr">[NSRunLoop mainRunLoop]</span>; <span class="hljs-comment">// 获得主线程的RunLoop对象</span><br><span class="hljs-built_in">CFRunLoopGetCurrent</span>(); <span class="hljs-comment">// 获得当前线程的RunLoop对象</span><br><span class="hljs-built_in">CFRunLoopGetMain</span>(); <span class="hljs-comment">// 获得主线程的RunLoop对象</span><br></code></pre></td></tr></table></figure><h2 id="你做了什么工作使崩溃率下降的-（使用什么工具定位崩溃，崩溃的补救措施）"><a href="#你做了什么工作使崩溃率下降的-（使用什么工具定位崩溃，崩溃的补救措施）" class="headerlink" title="你做了什么工作使崩溃率下降的     （使用什么工具定位崩溃，崩溃的补救措施）"></a>你做了什么工作使崩溃率下降的     （使用什么工具定位崩溃，崩溃的补救措施）</h2><p>答：线上项目中集成第三方bug收集工具  bugly  然后配置好符号表（dSYM），app每次崩溃bugly后台都会有相应的崩溃信息，而且能够具体的某一行，根据崩溃信息查漏补缺。<br>开发过程中根据Xcode设置全局断点定位崩溃某一行。<br>测试过程中可以根据bugly后台查看崩溃信息，也可以使用Xcode查看手机里面的log信息来分析crash信息。</p><h2 id="使用什么方式使子线程永驻"><a href="#使用什么方式使子线程永驻" class="headerlink" title="使用什么方式使子线程永驻"></a>使用什么方式使子线程永驻</h2><p>开启子线程的runloop</p><h2 id="https-中间人攻击（是怎样攻击的）"><a href="#https-中间人攻击（是怎样攻击的）" class="headerlink" title="https 中间人攻击（是怎样攻击的）"></a>https 中间人攻击（是怎样攻击的）</h2><p>HTTPS 中间人攻击。也就是通讯双方中插入一个中间人，通讯双方的对方已经变成中间人了，而不是原本的对方。</p><p>HTTPS 协议之所以是安全的是因为 HTTPS 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现。但其实，HTTPS 在内容传输的加密上使用的是对称加密，非对称加密只作用在证书验证阶段。</p><p>HTTPS的整体过程分为证书验证和数据传输阶段</p><p>① 证书验证阶段</p><ol><li>   客户端发起 HTTPS 请求</li><li>   服务端返回 HTTPS 证书</li><li>   客户端验证证书是否合法，如果不合法则提示告警</li></ol><p>② 数据传输阶段</p><ol><li>   当证书验证合法后，客户端在本地生成随机数</li><li>   通过公钥加密随机数，并把加密后的随机数传输到服务端</li><li>   服务端通过私钥对随机数进行解密</li><li>   服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输</li></ol><p>为什么数据传输是用对称加密？<br>首先，非对称加密的加解密效率是非常低的，而 http 的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的；另外，在 HTTPS 的场景中只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以 HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密。</p><p>为什么需要 CA 认证机构颁发证书？<br>HTTP 协议被认为不安全是因为传输过程容易被监听者勾线监听、伪造服务器，而 HTTPS 协议主要解决的便是网络传输的安全性问题。首先我们假设不存在认证机构，任何人都可以制作证书，这带来的安全风险便是经典的“中间人攻击”问题。“中间人攻击”的具体过程如下：</p><p>过程原理：</p><ol><li>   客户端请求被劫持（如DNS劫持等），所有请求均发送到中间人的服务器</li><li>   中间人服务器返回中间人自己的证书</li><li>   客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输</li><li>   中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密</li><li>   中间人以客户端的请求内容再向正规网站发起请求</li><li>   因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据</li><li>   中间人凭借与正规网站建立的对称加密算法对内容进行解密</li><li>   中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输</li><li>   客户端通过与中间人建立的对称加密算法对返回结果数据进行解密<br>由于缺少对证书的验证，所以客户端虽然发起的是 HTTPS 请求，但客户端完全不知道自己的网络已被拦截，传输内容被中间人全部窃取。<br>Q: HTTPS 为什么安全？<br>A: 因为 HTTPS 保证了传输安全，防止传输过程被监听、防止数据被窃取，可以确认网站的真实性。</li></ol><p>Q: HTTPS 的传输过程是怎样的？<br>A: 客户端发起 HTTPS 请求，服务端返回证书，客户端对证书进行验证，验证通过后本地生成用于改造对称加密算法的随机数，通过证书中的公钥对随机数进行加密传输到服务端，服务端接收后通过私钥解密得到随机数，之后的数据交互通过对称加密算法进行加解密。<br>Q: 为什么需要证书？<br>A: 防止”中间人“攻击，同时可以为网站提供身份证明。</p><p>Q: 使用 HTTPS 会被抓包吗？<br>A: 会被抓包，HTTPS 只防止用户在不知情的情况下通信被监听，如果用户主动授信，是可以构建“中间人”网络，代理软件可以对传输内容进行解密。</p><h2 id="KVC-原理"><a href="#KVC-原理" class="headerlink" title="KVC 原理"></a>KVC 原理</h2><ol><li>   KVC的全称是Key-Value Coding、俗称“键值编码”、可以通过一个key来访问某一个属性。</li><li>   常见的API有四种<br>setValue: forKey<br>setValue: forKeyPath<br>valueForKey:<br>valueForKeyPath<br>forKey 和 forKeyPath 主要区别是路径区别</li></ol><h2 id="KVO实现原理"><a href="#KVO实现原理" class="headerlink" title="KVO实现原理"></a>KVO实现原理</h2><p>KVO的原理：</p><ol><li>   当实例对象 进行KVO观察时候，会利用RuntimeAPI动态生成一个子类，然后将对象的isa指向新生成的子类</li><li>   KVO本质上是监听属性的setter方法，只要被观察对象有成员变量和对应的set方法，调用Foundation的_NSSetValueAndNotify函数这个函数内部会执行 willChangeVlaueForKey函数、父类的setter方法 和didChangeVlaueForKey函数</li><li>   子类会重写父类的set、class、dealloc方法</li><li>   当观察对象移除所有的监听后，会将观察对象的isa指向原来的类</li><li>   当观察对象的监听全部移除后，动态生成的类不会注销，而是留在下次观察时候再使用，避免反复创建中间子类</li></ol><h2 id="为什么ui在主线程刷新"><a href="#为什么ui在主线程刷新" class="headerlink" title="为什么ui在主线程刷新"></a>为什么ui在主线程刷新</h2><p>UI刷新在主线程主要有两个原因<br>第一：安全<br>因为UIKit框架不是线程安全的，当多个线程同时操作UI的时候，抢夺资源，导致崩溃，UI异常等问题。</p><p>第二：用户体验<br>iOS中只有主线程才能立即刷新UI。在子线程中是不能够更新UI，我们看到的子线程能够更新UI的原因是，等到子线程执行完毕，自动进入了主线程去执行子线程中更新UI的代码。由于子线程执行时间非常短暂，让我们误以为子线程可以更新UI。如果子线程一直在运行，则无法更新UI，因为没有办法进入主线程。</p><h2 id="block有几种，底层实现，以及如何持有外部变量的"><a href="#block有几种，底层实现，以及如何持有外部变量的" class="headerlink" title="block有几种，底层实现，以及如何持有外部变量的"></a>block有几种，底层实现，以及如何持有外部变量的</h2><p>block是封装了函数调用以及函数调用环境的OC对象<br>block 有三种类型分别如下<br>__NSGlobalBlock<br>__NSStackBlock<br>__NSMallocBlock<br>只要没有访问 auto的变量 都是 <strong>NSGlobalBlock</strong></p><p>访问了auto变量 但是没有调用 copy  都是  <strong>NSStackBlock</strong></p><p>即访问了auto变量又调用了copy 则是  <strong>NSMallocBlock</strong></p><p>注意：<br>__NSGlobalBlock__即使调用了copy 它还是 <strong>NSGlobalBlock</strong><br>__NSStackBlock__调用了 copy 它就变成了  <strong>NSMallocBlock</strong><br><strong>NSMallocBlock</strong> 调用了copy 只是使引用计数增加 其类型还是 <strong>NSMallocBlock</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="iOS面试" scheme="https://herohuqinchao.github.io/categories/iOS%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="OC" scheme="https://herohuqinchao.github.io/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>个人Blog使用</title>
    <link href="https://herohuqinchao.github.io/post/1750059094/"/>
    <id>https://herohuqinchao.github.io/post/1750059094/</id>
    <published>2022-03-09T12:00:32.000Z</published>
    <updated>2022-03-17T03:38:14.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>1.安装node.js<br>2.安装hexo<br>3.安装git（选择性安装，因为hexo有插件可以直接上传Github）<br>4.一个Github账号用于创建库</p><h2 id="需具备基础"><a href="#需具备基础" class="headerlink" title="需具备基础"></a>需具备基础</h2><p>1.html<br>2.css<br>3.markdown（主要写文章的标记语言，编写方便）</p><h2 id="创建一个Github库"><a href="#创建一个Github库" class="headerlink" title="创建一个Github库"></a>创建一个Github库</h2><p>在Github中创建一个库，其中Repository name将会影响到后续网页的上传，请慎重填写。</p><p>创建完库后的https链接记下来，后续上传网页将会用到</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>进入<a href="https://nodejs.org/">https://nodejs.org/</a></p><p>LTS:长期服务，较为稳定<br>Current:最新版本<br>建议下载LTS版本，搭建网站以稳为主。</p><p>可以选择直接下载安装包下载，也可以用指令搭配其他环境下载<br><a href="https://nodejs.org/zh-tw/download/package-manager/">https://nodejs.org/zh-tw/download/package-manager/</a></p><p>安装完后，检查node.js版本验证是否成功安装</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">npm -v  <span class="hljs-comment">#检查npm版本号</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>  <span class="hljs-comment">#检查node.js版本号</span><br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo必须在具备node.js的环境中运行，所以必须执行上一步<br>在命令行中执行</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g  <span class="hljs-meta">#安装Hexo本体</span><br></code></pre></td></tr></table></figure><h2 id="创建第一个网页"><a href="#创建第一个网页" class="headerlink" title="创建第一个网页"></a>创建第一个网页</h2><p>初始化Hexo用于创建第一个页面</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span>  <span class="hljs-meta">#初始化Hexo</span><br></code></pre></td></tr></table></figure><p>hexo init的后面也可以加一个文件夹名字用于创建一个新的空文件夹，比如在后面加一个blog，如果文件夹不是空的，hexo将初始化失败。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog  <span class="hljs-meta">#在blog文件夹初始化Hexo</span><br></code></pre></td></tr></table></figure><h2 id="写第一篇文章"><a href="#写第一篇文章" class="headerlink" title="写第一篇文章"></a>写第一篇文章</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>&lt;tittle&gt; <span class="hljs-meta">#创建一个新页面，&lt;   &gt;内为文章标题</span><br></code></pre></td></tr></table></figure><p>如果你的主题有默认布局，则可以加上layout生成默认布局的页面</p><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="测试和编译"><a href="#测试和编译" class="headerlink" title="测试和编译"></a>测试和编译</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo s  <span class="hljs-meta">#启用服务，http:<span class="hljs-comment">//localhost:4000/ 为默认地址</span></span><br></code></pre></td></tr></table></figure><h2 id="上传网页"><a href="#上传网页" class="headerlink" title="上传网页"></a>上传网页</h2><p>在不使用git的情况下，单纯靠Hexo上传网页，需要先安装Hexo内的一个插件</p><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git --save  <span class="hljs-comment">#安装hexo-deployer-git</span><br></code></pre></td></tr></table></figure><p>安装完成后需到hexo的_config.yml配置文件进行GitHub库的设定</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span>  <span class="hljs-comment">#如果是上传到git，type类型填git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;https://github.com/username/blog.git&#x27;</span>  <span class="hljs-comment">#这边填写的就是你创建完库后的http链接，直接复制粘贴即可。username填你的名字，blog是你的库，如果你的库就是你的名字则不需要username后面的内容，但最后都加.git</span><br>  <span class="hljs-attr">brach:</span> <span class="hljs-string">&#x27;gh-pages&#x27;</span>  <span class="hljs-comment">#这边是你库的分支，选择你想上传的就好，一般填gh-pages</span><br></code></pre></td></tr></table></figure><p>清除本地文件</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> cl  <span class="hljs-comment">#清除本地文件</span><br></code></pre></td></tr></table></figure><p>编译生成静态网页文件</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g  <span class="hljs-comment">#编译生成静态网页文件</span><br></code></pre></td></tr></table></figure><p>将编译完成的静态文件上传至Github</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> d  <span class="hljs-comment">#上传至Github,第一次上传会要求登入账号</span><br></code></pre></td></tr></table></figure><p>之后就完成啦～你的网站已经可以在Github上正常使用了～</p><h2 id="推荐使用软件"><a href="#推荐使用软件" class="headerlink" title="推荐使用软件"></a>推荐使用软件</h2><p>1.Typora<br>Markdown语言的编辑器，可以很轻易的编写内容</p><p>2.Visual Studio Code<br>微软出品的编辑器，前端必备</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="博客" scheme="https://herohuqinchao.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
