<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SJのBlog</title>
  
  <subtitle>构建温馨的小窝</subtitle>
  <link href="https://herohuqinchao.github.io/atom.xml" rel="self"/>
  
  <link href="https://herohuqinchao.github.io/"/>
  <updated>2022-03-17T03:11:53.616Z</updated>
  <id>https://herohuqinchao.github.io/</id>
  
  <author>
    <name>SJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo的基本使用</title>
    <link href="https://herohuqinchao.github.io/post/2602165680/"/>
    <id>https://herohuqinchao.github.io/post/2602165680/</id>
    <published>2022-03-17T02:54:49.000Z</published>
    <updated>2022-03-17T03:11:53.616Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><blockquote><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</p></blockquote><h2 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h2><blockquote><p>安装使用hexo之前需要先安装Node.js和Git，当已经安装了Node.js和npm(npm是node.js的包管理工具)，可以通过以下命令安装hexo</p><pre><code>  $ npm install -g hexo-cli</code></pre><p>可以通过以下命令查看主机中是否安装了node.js和npm</p><pre><code>  $ node --version    #检查是否安装了node.js  $ npm --version     #检查是否安装了npm</code></pre><p>如下所示表示已经安装了node.js和npm</p><pre><code>  root@***:~# node --version  v8.11.3  root@***:~# npm --version  6.7.0</code></pre></blockquote><h2 id="3-建站"><a href="#3-建站" class="headerlink" title="3. 建站"></a>3. 建站</h2><blockquote><p>安装完Hexo之后，执行下列命令，Hexo将会在指定目录中新建所需要的文件，指定的目录即为Hexo的工作站</p><pre><code>  $ hexo init &lt;folder&gt;  $ cd &lt;folder&gt;  $ npm install</code></pre><p>新建完成之后，指定目录中的情况如下</p><pre><code>  .  ├── _config.yml  ├── package.json  ├── scaffolds  ├── source  |   ├── _drafts  |   └── _posts  └── themes</code></pre></blockquote><h3 id="3-1-config-yml"><a href="#3-1-config-yml" class="headerlink" title="3.1. _config.yml"></a>3.1. _config.yml</h3><blockquote><p>网站的配置信息，您可以在此配置大部分的参数。</p></blockquote><h3 id="3-2-package-json"><a href="#3-2-package-json" class="headerlink" title="3.2. package.json"></a>3.2. package.json</h3><blockquote><p>应用程序的信息，以及需要安装的模块信息。</p></blockquote><h3 id="3-3-scaffolds"><a href="#3-3-scaffolds" class="headerlink" title="3.3. scaffolds"></a>3.3. scaffolds</h3><blockquote><p>模版文件夹。新建文章时，Hexo 会根据 scaffold 中的模板文件来建立新的文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。也就是说，通过hexo命令每新建一个文章，都会包含指定模板文件中的内容。</p></blockquote><h3 id="3-4-source"><a href="#3-4-source" class="headerlink" title="3.4. source"></a>3.4. source</h3><blockquote><p>资源文件夹是存放用户资源的地方，如markdown文章。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><p>注意：除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。</p></blockquote><h3 id="3-5-themes"><a href="#3-5-themes" class="headerlink" title="3.5. themes"></a>3.5. themes</h3><blockquote><p>主题文件夹。Hexo 会根据主题来解析source目录中的markdown文件生成静态页面。官网主题详述</p></blockquote><h2 id="4-写作"><a href="#4-写作" class="headerlink" title="4. 写作"></a>4. 写作</h2><blockquote><p>可以执行下列命令来创建一篇新文章。</p><pre><code>  $ hexo new [layout] &lt;title&gt;</code></pre><p>可以在命令中指定文章的布局（layout），不指定默认为 post，也可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。创建的新文章会自动加上指定布局对应的模板文件中的内容。</p></blockquote><h3 id="4-1-布局（Layout）"><a href="#4-1-布局（Layout）" class="headerlink" title="4.1. 布局（Layout）"></a>4.1. 布局（Layout）</h3><blockquote><p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><p>布局路径postsource/_postspagesourcedraftsource/_drafts</p><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。</p></blockquote><h3 id="4-2-模版（Scaffold）"><a href="#4-2-模版（Scaffold）" class="headerlink" title="4.2. 模版（Scaffold）"></a>4.2. 模版（Scaffold）</h3><blockquote><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：</p><pre><code>  $ hexo new photo &quot;My Gallery&quot;</code></pre><p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><p>变量描述layout布局title标题date文件建立日期</p></blockquote><h3 id="4-3-Front-matter"><a href="#4-3-Front-matter" class="headerlink" title="4.3. Front-matter"></a>4.3. Front-matter</h3><blockquote><p>Front-matter是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre><code>  ---  title: Hello World  date: 2013/7/13 20:46:25  ---</code></pre><p>注意：一般Front-matter使用的yaml语法，yaml语法需要注意空格，如title: Hello World冒号需要有一个空格，当然除YAML 外，你也可以使用 JSON 来编写 Front-matter。<br>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数描述默认值layout布局title标题date建立日期文件建立日updated更新日期文件更新日期comments开启文章的评论功能truetags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址</p></blockquote><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><blockquote><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性而标签没有顺序和层次。</p><pre><code>  categories:  - Diary  tags:  - PS3  - Games</code></pre><p>WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法： categories:<br>Diary<br>Life<br>会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类.</p></blockquote><h3 id="4-4-文章摘要"><a href="#4-4-文章摘要" class="headerlink" title="4.4. 文章摘要"></a>4.4. 文章摘要</h3><blockquote><p>设置文章摘要，我们只需在想显示为摘要的内容之后添 <code>&lt;!-- more --&gt;</code> 即可。像下面这样：</p><pre><code>  ---  title: hello hexo markdown  date: 2016-11-16 18:11:25  tags:  - hello  - hexo  - markdown  ---  我是短小精悍的文章摘要(๑•̀ㅂ•́) ✧  &lt;!-- more --&gt;  紧接着文章摘要的正文内容</code></pre><p>这样，<code>&lt;!-- more --&gt;</code> 之前、文档配置参数之后中的内容便会被渲染为站点中的文章摘要。</p><p>注意！文章摘要在文章详情页是正文中最前面的内容。</p></blockquote><h3 id="4-5-资源引用"><a href="#4-5-资源引用" class="headerlink" title="4.5. 资源引用"></a>4.5. 资源引用</h3><blockquote><p>写个博客，有时候会想添加个图片或者其他形式的资源等等。有以下两种方式进行解决：</p><p>使用绝对路径引用资源，在 Web 世界中就是资源的 URL<br>使用相对路径引用资源<br>对于使用相对路径引用资源的，我们可以使用 Hexo 提供的资源文件夹功能。</p><p>使用文本编辑器打开站点根目录下的 _ config.yml 文件，将 post_asset_folder 值设置为 true。</p><p>post_asset_folder: true<br>修改之后会开启 Hexo 的文章资源文件管理功能。Hexo 将会在我们每一次通过 hexo new <title> 命令创建新文章时自动创建一个同名文件夹，于是我们便可以将文章所引用的相关资源放到这个同名文件夹下，然后通过相对路径引用。例如，你把一个 example.jpg 图片放在了这个同名文件夹中，使用相对路径的常规 markdown 语法 <img src="./example.jpg">即可访问 。</p></blockquote><h2 id="5-网站发布"><a href="#5-网站发布" class="headerlink" title="5. 网站发布"></a>5. 网站发布</h2><blockquote><p>首先执行下列命令生成相应的静态网页，生成的静态网页以及相关资源都会在public目录下</p><pre><code>  $ hexo generate</code></pre></blockquote><h3 id="5-1-用hexo-server"><a href="#5-1-用hexo-server" class="headerlink" title="5.1. 用hexo-server"></a>5.1. 用hexo-server</h3><blockquote><p>hexo-server模块的主要命令如下，输入以下命令以启动服务器，您的网站会在 <a href="http://localhost:4000/">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><pre><code>  $ hexo server</code></pre><p>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下：</p><pre><code>  $ hexo server -p 5000</code></pre><p>但是个人认为此方式比较适合用于调试网站，并不适合长时间的网站服务器，同时为了让这个命令在后台长时间运行，需要编写相应的脚本。</p></blockquote><h3 id="5-2-部署到Git上"><a href="#5-2-部署到Git上" class="headerlink" title="5.2. 部署到Git上"></a>5.2. 部署到Git上</h3><blockquote><p>这个暂时没有尝试过，但是网络上很多都是关于部署到Git上的，可以自行谷歌或百度。</p></blockquote><h3 id="5-3-部署到Apache或者Nginx上"><a href="#5-3-部署到Apache或者Nginx上" class="headerlink" title="5.3. 部署到Apache或者Nginx上"></a>5.3. 部署到Apache或者Nginx上</h3><blockquote><p>通过hexo g命令生成的都是静态网页，可以把生成的public目录中的文件，全都拷贝到网站根目录，然后启动apache或者nginx服务。</p></blockquote><h2 id="6-其他基础命令"><a href="#6-其他基础命令" class="headerlink" title="6. 其他基础命令"></a>6. 其他基础命令</h2><h3 id="6-1-清除缓存文件"><a href="#6-1-清除缓存文件" class="headerlink" title="6.1. 清除缓存文件"></a>6.1. 清除缓存文件</h3><blockquote><p>为了避免不必要的错误，在生成静态文件前，强烈建议先运行以下命令：</p><pre><code>  $ hexo clean</code></pre><p>上述命令会清除本地站点文件夹下的缓存文件（db.json）和已有的静态文件（public）。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="博客" scheme="https://herohuqinchao.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>面试题（一）</title>
    <link href="https://herohuqinchao.github.io/post/950528940/"/>
    <id>https://herohuqinchao.github.io/post/950528940/</id>
    <published>2022-03-16T01:43:15.000Z</published>
    <updated>2022-03-17T02:30:18.247Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="谈谈Runtime"><a href="#谈谈Runtime" class="headerlink" title="谈谈Runtime"></a>谈谈Runtime</h2><blockquote><p>OC是一门动态性比较强的编程语言，允许很多操作推迟到程序运行时再进行<br>OC的动态性就是由Runtime来支撑和实现的，Runtime是一套C语言的API，封装了很多动态性相关的函数<br>平时编写的OC代码，底层都是转换成了Runtime API进行调用</p><p>利用如time我们可以做很多事情 如</p><ol><li>   利用关联对象（AssociatedObject）给分类添加属性</li><li>   遍历类的所有成员变量（修改textfield的占位文字颜色、字典转模型、自动归档解档）</li><li>   交换方法实现（交换系统的方法）</li><li>   利用消息转发机制解决方法找不到的异常问题<br>OC中方法的调用都是转化为objc_msgSend函数的调用<br><code>objc_msgSend</code>函数可以分为三个阶段</li></ol><p>第一个阶段是：消息发送阶段<br>首先判断消息的接受者是否存在 如果不存在则直接返回如果存在则 从自己类的方法缓存列表中查找该方法，如果存在则执行 如果不存在则去自己类的方法列表中查找，如果存在则缓存到自己类的方法缓存列表中 然后在执行，如果不存在则去父类的方法缓存列表中查找，如果存在则缓存到自己类的方法缓存列表中 然后执行，如果不存在 则去父父类的方法列表中查找，如果存在 则缓存到自己类的方法缓存列表中， 如果不存在则进入第二不 方法动态解析阶段</p><p>第二阶段是：方法动态解析阶段<br>首先判断方法是否动态解析过，如果之前已经有过动态解析 则直接进入第一步消息发送阶段<br>如果没有过动态解析则调用+resolveInstanceMethod：或则+resoveClassMethod：方法来动态解析 然后标记为已经动态解析 最后重新走“消息发送”的流程<br>在此阶段 我们可以添加一个新的方法来代替原来的方法 如果在此阶段不做任何处理 则直接进入第三步 消息转发阶段</p><p>第三阶段是：消息转发阶段</p><ol><li>   首先调用forwardingTargetForSelector:方法 在此方法中：如果返回值不为空 则直接给返回值转发消息<br>如果返回值为空否则进入第2步 调用方法签名函数</li><li>   调用methodSignatureForSelector:方法（方法签名函数）在此方法中：<br>如果返回值为空 则直接调用 调用doesNotRecognizeSelector:方法 然后程序报错：unrecognized selector sent to instance 经典错误<br>如果返回值不为空 则直接进入第3步 调用 forwardInvocation方法</li><li>   forwardInvocation：方法<br>开发人员可以在此方法中处理调用的方法</li></ol></blockquote><h2 id="谈谈Runloop"><a href="#谈谈Runloop" class="headerlink" title="谈谈Runloop"></a>谈谈Runloop</h2><blockquote><p>顾名思义就是运行循环，在程序运行过程中循环做一些事情</p><ol><li>   保持程序的持续运行</li><li>   处理App中的各种事件（比如触摸事件、定时器事件等）</li><li>   节省CPU资源，提高程序性能：该做事时做事，该休息时休息</li></ol></blockquote><h2 id="runloop与线程之间的关系"><a href="#runloop与线程之间的关系" class="headerlink" title="runloop与线程之间的关系"></a>runloop与线程之间的关系</h2><blockquote><ol><li>   每条线程都有唯一的一个与之对应的RunLoop对象</li><li>   RunLoop保存在一个全局的Dictionary里，线程作为key，RunLoop作为value</li><li>   线程刚创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建（[NSRunLoop currentRunLoop]）</li><li>   RunLoop会在线程结束时销毁</li><li>   主线程的RunLoop已经自动获取（创建），子线程默认没有开启RunLoop</li></ol></blockquote><h2 id="获取runloop对象的方法"><a href="#获取runloop对象的方法" class="headerlink" title="获取runloop对象的方法"></a>获取runloop对象的方法</h2><blockquote><p>[NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象<br>[NSRunLoop mainRunLoop]; // 获得主线程的RunLoop对象<br>CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象<br>CFRunLoopGetMain(); // 获得主线程的RunLoop对象</p></blockquote><h2 id="你做了什么工作使崩溃率下降的-（使用什么工具定位崩溃，崩溃的补救措施）"><a href="#你做了什么工作使崩溃率下降的-（使用什么工具定位崩溃，崩溃的补救措施）" class="headerlink" title="你做了什么工作使崩溃率下降的     （使用什么工具定位崩溃，崩溃的补救措施）"></a>你做了什么工作使崩溃率下降的     （使用什么工具定位崩溃，崩溃的补救措施）</h2><blockquote><p>答：线上项目中集成第三方bug收集工具  bugly  然后配置好符号表（dSYM），app每次崩溃bugly后台都会有相应的崩溃信息，而且能够具体的某一行，根据崩溃信息查漏补缺。<br>开发过程中根据Xcode设置全局断点定位崩溃某一行。<br>测试过程中可以根据bugly后台查看崩溃信息，也可以使用Xcode查看手机里面的log信息来分析crash信息。</p></blockquote><h2 id="使用什么方式使子线程永驻"><a href="#使用什么方式使子线程永驻" class="headerlink" title="使用什么方式使子线程永驻"></a>使用什么方式使子线程永驻</h2><blockquote><p>开启子线程的runloop</p></blockquote><h2 id="https-中间人攻击（是怎样攻击的）"><a href="#https-中间人攻击（是怎样攻击的）" class="headerlink" title="https 中间人攻击（是怎样攻击的）"></a>https 中间人攻击（是怎样攻击的）</h2><blockquote><p>HTTPS 中间人攻击。也就是通讯双方中插入一个中间人，通讯双方的对方已经变成中间人了，而不是原本的对方。</p><p>HTTPS 协议之所以是安全的是因为 HTTPS 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现。但其实，HTTPS 在内容传输的加密上使用的是对称加密，非对称加密只作用在证书验证阶段。</p><p>HTTPS的整体过程分为证书验证和数据传输阶段</p><p>① 证书验证阶段</p><ol><li>   客户端发起 HTTPS 请求</li><li>   服务端返回 HTTPS 证书</li><li>   客户端验证证书是否合法，如果不合法则提示告警</li></ol><p>② 数据传输阶段</p><ol><li>   当证书验证合法后，客户端在本地生成随机数</li><li>   通过公钥加密随机数，并把加密后的随机数传输到服务端</li><li>   服务端通过私钥对随机数进行解密</li><li>   服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输</li></ol><p>为什么数据传输是用对称加密？<br>首先，非对称加密的加解密效率是非常低的，而 http 的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的；另外，在 HTTPS 的场景中只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以 HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密。</p><p>为什么需要 CA 认证机构颁发证书？<br>HTTP 协议被认为不安全是因为传输过程容易被监听者勾线监听、伪造服务器，而 HTTPS 协议主要解决的便是网络传输的安全性问题。首先我们假设不存在认证机构，任何人都可以制作证书，这带来的安全风险便是经典的“中间人攻击”问题。“中间人攻击”的具体过程如下：</p><p>过程原理：</p><ol><li>   客户端请求被劫持（如DNS劫持等），所有请求均发送到中间人的服务器</li><li>   中间人服务器返回中间人自己的证书</li><li>   客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输</li><li>   中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密</li><li>   中间人以客户端的请求内容再向正规网站发起请求</li><li>   因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据</li><li>   中间人凭借与正规网站建立的对称加密算法对内容进行解密</li><li>   中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输</li><li>   客户端通过与中间人建立的对称加密算法对返回结果数据进行解密<br>由于缺少对证书的验证，所以客户端虽然发起的是 HTTPS 请求，但客户端完全不知道自己的网络已被拦截，传输内容被中间人全部窃取。<br>Q: HTTPS 为什么安全？<br>A: 因为 HTTPS 保证了传输安全，防止传输过程被监听、防止数据被窃取，可以确认网站的真实性。</li></ol><p>Q: HTTPS 的传输过程是怎样的？<br>A: 客户端发起 HTTPS 请求，服务端返回证书，客户端对证书进行验证，验证通过后本地生成用于改造对称加密算法的随机数，通过证书中的公钥对随机数进行加密传输到服务端，服务端接收后通过私钥解密得到随机数，之后的数据交互通过对称加密算法进行加解密。<br>Q: 为什么需要证书？<br>A: 防止”中间人“攻击，同时可以为网站提供身份证明。</p><p>Q: 使用 HTTPS 会被抓包吗？<br>A: 会被抓包，HTTPS 只防止用户在不知情的情况下通信被监听，如果用户主动授信，是可以构建“中间人”网络，代理软件可以对传输内容进行解密。</p></blockquote><h2 id="KVC-原理"><a href="#KVC-原理" class="headerlink" title="KVC 原理"></a>KVC 原理</h2><blockquote><ol><li>   KVC的全称是Key-Value Coding、俗称“键值编码”、可以通过一个key来访问某一个属性。</li><li>   常见的API有四种<br>setValue: forKey<br>setValue: forKeyPath<br>valueForKey:<br>valueForKeyPath<br>forKey 和 forKeyPath 主要区别是路径区别</li></ol></blockquote><h2 id="KVO实现原理"><a href="#KVO实现原理" class="headerlink" title="KVO实现原理"></a>KVO实现原理</h2><blockquote><p>KVO的原理：</p><ol><li>   当实例对象 进行KVO观察时候，会利用RuntimeAPI动态生成一个子类，然后将对象的isa指向新生成的子类</li><li>   KVO本质上是监听属性的setter方法，只要被观察对象有成员变量和对应的set方法，调用Foundation的_NSSetValueAndNotify函数这个函数内部会执行 willChangeVlaueForKey函数、父类的setter方法 和didChangeVlaueForKey函数</li><li>   子类会重写父类的set、class、dealloc方法</li><li>   当观察对象移除所有的监听后，会将观察对象的isa指向原来的类</li><li>   当观察对象的监听全部移除后，动态生成的类不会注销，而是留在下次观察时候再使用，避免反复创建中间子类</li></ol></blockquote><h2 id="为什么ui在主线程刷新"><a href="#为什么ui在主线程刷新" class="headerlink" title="为什么ui在主线程刷新"></a>为什么ui在主线程刷新</h2><blockquote><p>UI刷新在主线程主要有两个原因<br>第一：安全<br>因为UIKit框架不是线程安全的，当多个线程同时操作UI的时候，抢夺资源，导致崩溃，UI异常等问题。</p><p>第二：用户体验<br>iOS中只有主线程才能立即刷新UI。在子线程中是不能够更新UI，我们看到的子线程能够更新UI的原因是，等到子线程执行完毕，自动进入了主线程去执行子线程中更新UI的代码。由于子线程执行时间非常短暂，让我们误以为子线程可以更新UI。如果子线程一直在运行，则无法更新UI，因为没有办法进入主线程。</p></blockquote><h2 id="block有几种，底层实现，以及如何持有外部变量的"><a href="#block有几种，底层实现，以及如何持有外部变量的" class="headerlink" title="block有几种，底层实现，以及如何持有外部变量的"></a>block有几种，底层实现，以及如何持有外部变量的</h2><blockquote><p>block是封装了函数调用以及函数调用环境的OC对象<br>block 有三种类型分别如下<br>__NSGlobalBlock<br>__NSStackBlock<br>__NSMallocBlock<br>只要没有访问 auto的变量 都是 <strong>NSGlobalBlock</strong></p><p>访问了auto变量 但是没有调用 copy  都是  <strong>NSStackBlock</strong></p><p>即访问了auto变量又调用了copy 则是  <strong>NSMallocBlock</strong></p><p>注意：__NSGlobalBlock__即使调用了copy 它还是 <strong>NSGlobalBlock</strong><br>             __NSStackBlock__调用了 copy 它就变成了  <strong>NSMallocBlock</strong><br>             <strong>NSMallocBlock</strong> 调用了copy 只是使引用计数增加 其类型还是 <strong>NSMallocBlock</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="iOS面试" scheme="https://herohuqinchao.github.io/categories/iOS%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="OC" scheme="https://herohuqinchao.github.io/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>个人Blog使用</title>
    <link href="https://herohuqinchao.github.io/post/1750059094/"/>
    <id>https://herohuqinchao.github.io/post/1750059094/</id>
    <published>2022-03-09T12:00:32.000Z</published>
    <updated>2022-03-16T01:47:13.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>1.安装node.js<br>2.安装hexo<br>3.安装git（选择性安装，因为hexo有插件可以直接上传Github）<br>4.一个Github账号用于创建库</p><h2 id="需具备基础"><a href="#需具备基础" class="headerlink" title="需具备基础"></a>需具备基础</h2><p>1.html<br>2.css<br>3.markdown（主要写文章的标记语言，编写方便）</p><h2 id="创建一个Github库"><a href="#创建一个Github库" class="headerlink" title="创建一个Github库"></a>创建一个Github库</h2><p>在Github中创建一个库，其中Repository name将会影响到后续网页的上传，请慎重填写。</p><p>创建完库后的https链接记下来，后续上传网页将会用到</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>进入<a href="https://nodejs.org/">https://nodejs.org/</a></p><p>LTS:长期服务，较为稳定<br>Current:最新版本<br>建议下载LTS版本，搭建网站以稳为主。</p><p>可以选择直接下载安装包下载，也可以用指令搭配其他环境下载<br><a href="https://nodejs.org/zh-tw/download/package-manager/">https://nodejs.org/zh-tw/download/package-manager/</a></p><p>安装完后，检查node.js版本验证是否成功安装</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">npm -v  <span class="hljs-comment">#检查npm版本号</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>  <span class="hljs-comment">#检查node.js版本号</span><br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo必须在具备node.js的环境中运行，所以必须执行上一步<br>在命令行中执行</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g  <span class="hljs-meta">#安装Hexo本体</span><br></code></pre></td></tr></table></figure><h2 id="创建第一个网页"><a href="#创建第一个网页" class="headerlink" title="创建第一个网页"></a>创建第一个网页</h2><p>初始化Hexo用于创建第一个页面</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span>  <span class="hljs-meta">#初始化Hexo</span><br></code></pre></td></tr></table></figure><p>hexo init的后面也可以加一个文件夹名字用于创建一个新的空文件夹，比如在后面加一个blog，如果文件夹不是空的，hexo将初始化失败。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog  <span class="hljs-meta">#在blog文件夹初始化Hexo</span><br></code></pre></td></tr></table></figure><h2 id="写第一篇文章"><a href="#写第一篇文章" class="headerlink" title="写第一篇文章"></a>写第一篇文章</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>&lt;tittle&gt; <span class="hljs-meta">#创建一个新页面，&lt;   &gt;内为文章标题</span><br></code></pre></td></tr></table></figure><p>如果你的主题有默认布局，则可以加上layout生成默认布局的页面</p><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="测试和编译"><a href="#测试和编译" class="headerlink" title="测试和编译"></a>测试和编译</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo s  <span class="hljs-meta">#启用服务，http:<span class="hljs-comment">//localhost:4000/ 为默认地址</span></span><br></code></pre></td></tr></table></figure><h2 id="上传网页"><a href="#上传网页" class="headerlink" title="上传网页"></a>上传网页</h2><p>在不使用git的情况下，单纯靠Hexo上传网页，需要先安装Hexo内的一个插件</p><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git --save  <span class="hljs-comment">#安装hexo-deployer-git</span><br></code></pre></td></tr></table></figure><p>安装完成后需到hexo的_config.yml配置文件进行GitHub库的设定</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span>  <span class="hljs-comment">#如果是上传到git，type类型填git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;https://github.com/username/blog.git&#x27;</span>  <span class="hljs-comment">#这边填写的就是你创建完库后的http链接，直接复制粘贴即可。username填你的名字，blog是你的库，如果你的库就是你的名字则不需要username后面的内容，但最后都加.git</span><br>  <span class="hljs-attr">brach:</span> <span class="hljs-string">&#x27;gh-pages&#x27;</span>  <span class="hljs-comment">#这边是你库的分支，选择你想上传的就好，一般填gh-pages</span><br></code></pre></td></tr></table></figure><p>清除本地文件</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> cl  <span class="hljs-comment">#清除本地文件</span><br></code></pre></td></tr></table></figure><p>编译生成静态网页文件</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g  <span class="hljs-comment">#编译生成静态网页文件</span><br></code></pre></td></tr></table></figure><p>将编译完成的静态文件上传至Github</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> d  <span class="hljs-comment">#上传至Github,第一次上传会要求登入账号</span><br></code></pre></td></tr></table></figure><p>之后就完成啦～你的网站已经可以在Github上正常使用了～</p><h2 id="推荐使用软件"><a href="#推荐使用软件" class="headerlink" title="推荐使用软件"></a>推荐使用软件</h2><p>1.Typora<br>Markdown语言的编辑器，可以很轻易的编写内容</p><p>2.Visual Studio Code<br>微软出品的编辑器，前端必备</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="博客" scheme="https://herohuqinchao.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
