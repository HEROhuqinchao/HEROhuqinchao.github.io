<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SJのBlog</title>
  
  <subtitle>构建温馨的小窝</subtitle>
  <link href="https://herohuqinchao.github.io/atom.xml" rel="self"/>
  
  <link href="https://herohuqinchao.github.io/"/>
  <updated>2022-03-17T02:13:55.584Z</updated>
  <id>https://herohuqinchao.github.io/</id>
  
  <author>
    <name>SJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题（一）</title>
    <link href="https://herohuqinchao.github.io/post/950528940/"/>
    <id>https://herohuqinchao.github.io/post/950528940/</id>
    <published>2022-03-16T01:43:15.000Z</published>
    <updated>2022-03-17T02:13:55.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>###谈谈Runtime<br>OC是一门动态性比较强的编程语言，允许很多操作推迟到程序运行时再进行</p><p>OC的动态性就是由Runtime来支撑和实现的，Runtime是一套C语言的API，封装了很多动态性相关的函数</p><p>平时编写的OC代码，底层都是转换成了Runtime API进行调用</p><p>利用如time我们可以做很多事情 如<br>1、利用关联对象（AssociatedObject）给分类添加属性<br>2、遍历类的所有成员变量（修改textfield的占位文字颜色、字典转模型、自动归档解档）<br>3、交换方法实现（交换系统的方法）<br>4、利用消息转发机制解决方法找不到的异常问题</p><p>OC中方法的调用都是转化为objc_msgSend函数的调用<br><code>objc_msgSend</code>函数可以分为三个阶段</p><ol><li><p>第一个阶段是：消息发送阶段</p><p> 首先判断消息的接受者是否存在 如果不存在则直接返回如果存在则 从自己类的方法缓存列表中查找该方法，如果存在则执行 如果不存在则去自己类的方法列表中查找，如果存在则缓存到自己类的方法缓存列表中 然后在执行，如果不存在则去父类的方法缓存列表中查找，如果存在则缓存到自己类的方法缓存列表中 然后执行，如果不存在 则去父父类的方法列表中查找，如果存在 则缓存到自己类的方法缓存列表中， 如果不存在则进入第二不 方法动态解析阶段</p></li></ol><ol start="2"><li><p>第二阶段是：方法动态解析阶段</p><p> 首先判断方法是否动态解析过，如果之前已经有过动态解析 则直接进入第一步消息发送阶段</p><p> 如果没有过动态解析则调用+resolveInstanceMethod：或则+resoveClassMethod：方法来动态解析 然后标记为已经动态解析 最后重新走“消息发送”的流程</p><p> 在此阶段 我们可以添加一个新的方法来代替原来的方法 如果在此阶段不做任何处理 则直接进入第三步 消息转发阶段</p></li><li><p>第三阶段是：消息转发阶段</p><p> 1、首先调用forwardingTargetForSelector:方法 在此方法中：如果返回值不为空 则直接给返回值转发消息<br> 如果返回值为空否则进入第2步 调用方法签名函数</p><p> 2、调用methodSignatureForSelector:方法（方法签名函数）在此方法中：<br> 如果返回值为空 则直接调用 调用doesNotRecognizeSelector:方法 然后程序报错：unrecognized selector sent to instance 经典错误<br> 如果返回值不为空 则直接进入第3步 调用 forwardInvocation方法</p><p> 3、forwardInvocation：方法<br> 开发人员可以在此方法中处理调用的方法</p></li></ol><p>###谈谈Runloop</p><p>顾名思义就是运行循环，在程序运行过程中循环做一些事情</p><p>1、保持程序的持续运行<br>2、处理App中的各种事件（比如触摸事件、定时器事件等）<br>3、节省CPU资源，提高程序性能：该做事时做事，该休息时休息</p><p>#####runloop与线程之间的关系</p><blockquote><pre><code>1、每条线程都有唯一的一个与之对应的RunLoop对象2、RunLoop保存在一个全局的Dictionary里，线程作为key，RunLoop作为value3、线程刚创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建（[NSRunLoop currentRunLoop]）4、RunLoop会在线程结束时销毁5、主线程的RunLoop已经自动获取（创建），子线程默认没有开启RunLoop</code></pre><p>#####获取runloop对象的方法</p></blockquote><blockquote><pre><code>[NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象[NSRunLoop mainRunLoop]; // 获得主线程的RunLoop对象CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象CFRunLoopGetMain(); // 获得主线程的RunLoop对象</code></pre></blockquote><p>###你做了什么工作使崩溃率下降的     （使用什么工具定位崩溃，崩溃的补救措施）</p><blockquote><p>答：线上项目中集成第三方bug收集工具  bugly  然后配置好符号表（dSYM），app每次崩溃bugly后台都会有相应的崩溃信息，而且能够具体的某一行，根据崩溃信息查漏补缺。<br>开发过程中根据Xcode设置全局断点定位崩溃某一行。<br>测试过程中可以根据bugly后台查看崩溃信息，也可以使用Xcode查看手机里面的log信息来分析crash信息。</p></blockquote><p>###使用什么方式使子线程永驻</p><blockquote><p>开启子线程的runloop</p></blockquote><p>###https 中间人攻击（是怎样攻击的）</p><blockquote><p>HTTPS 中间人攻击。也就是通讯双方中插入一个中间人，通讯双方的对方已经变成中间人了，而不是原本的对方。</p><p>HTTPS 协议之所以是安全的是因为 HTTPS 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现。但其实，HTTPS 在内容传输的加密上使用的是对称加密，非对称加密只作用在证书验证阶段。</p><p>HTTPS的整体过程分为证书验证和数据传输阶段</p><p>① 证书验证阶段</p><ol><li>   客户端发起 HTTPS 请求</li><li>   服务端返回 HTTPS 证书</li><li>   客户端验证证书是否合法，如果不合法则提示告警</li></ol><p>② 数据传输阶段</p><ol><li>   当证书验证合法后，客户端在本地生成随机数</li><li>   通过公钥加密随机数，并把加密后的随机数传输到服务端</li><li>   服务端通过私钥对随机数进行解密</li><li>   服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输</li></ol><p>为什么数据传输是用对称加密？<br>首先，非对称加密的加解密效率是非常低的，而 http 的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的；另外，在 HTTPS 的场景中只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以 HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密。</p><p>为什么需要 CA 认证机构颁发证书？<br>HTTP 协议被认为不安全是因为传输过程容易被监听者勾线监听、伪造服务器，而 HTTPS 协议主要解决的便是网络传输的安全性问题。首先我们假设不存在认证机构，任何人都可以制作证书，这带来的安全风险便是经典的“中间人攻击”问题。“中间人攻击”的具体过程如下：</p><p>过程原理：<br>1、客户端请求被劫持（如DNS劫持等），所有请求均发送到中间人的服务器<br>2、中间人服务器返回中间人自己的证书<br>3、客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输<br>4、中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密<br>5、中间人以客户端的请求内容再向正规网站发起请求<br>6、因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据<br>7、中间人凭借与正规网站建立的对称加密算法对内容进行解密<br>8、中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输<br>9、客户端通过与中间人建立的对称加密算法对返回结果数据进行解密</p><p>由于缺少对证书的验证，所以客户端虽然发起的是 HTTPS 请求，但客户端完全不知道自己的网络已被拦截，传输内容被中间人全部窃取。</p><p>Q: HTTPS 为什么安全？<br>A: 因为 HTTPS 保证了传输安全，防止传输过程被监听、防止数据被窃取，可以确认网站的真实性。</p><p>Q: HTTPS 的传输过程是怎样的？<br>A: 客户端发起 HTTPS 请求，服务端返回证书，客户端对证书进行验证，验证通过后本地生成用于改造对称加密算法的随机数，通过证书中的公钥对随机数进行加密传输到服务端，服务端接收后通过私钥解密得到随机数，之后的数据交互通过对称加密算法进行加解密。</p><p>Q: 为什么需要证书？<br>A: 防止”中间人“攻击，同时可以为网站提供身份证明。</p><p>Q: 使用 HTTPS 会被抓包吗？<br>A: 会被抓包，HTTPS 只防止用户在不知情的情况下通信被监听，如果用户主动授信，是可以构建“中间人”网络，代理软件可以对传输内容进行解密。</p></blockquote><p>###KVC 原理</p><blockquote><p>1、KVC的全称是Key-Value Coding、俗称“键值编码”、可以通过一个key来访问某一个属性。<br>2、常见的API有四种<br>setValue: forKey<br>setValue: forKeyPath<br>valueForKey:<br>valueForKeyPath<br> forKey 和 forKeyPath 主要区别是路径区别</p></blockquote><p>###KVO实现原理</p><blockquote><p> KVO的原理：<br> 1、当实例对象 进行KVO观察时候，会利用RuntimeAPI动态生成一个子类，然后将对象的isa指向新生成的子类<br> 2、KVO本质上是监听属性的setter方法，只要被观察对象有成员变量和对应的set方法，调用Foundation的_NSSetValueAndNotify函数这个函数内部会执行 willChangeVlaueForKey函数、父类的setter方法 和didChangeVlaueForKey函数<br> 3、子类会重写父类的set、class、dealloc方法<br> 4、当观察对象移除所有的监听后，会将观察对象的isa指向原来的类<br> 5、当观察对象的监听全部移除后，动态生成的类不会注销，而是留在下次观察时候再使用，避免反复创建中间子类</p></blockquote><p>###为什么ui在主线程刷新</p><blockquote><p>UI刷新在主线程主要有两个原因<br>第一：安全<br>因为UIKit框架不是线程安全的，当多个线程同时操作UI的时候，抢夺资源，导致崩溃，UI异常等问题。</p><p>第二：用户体验<br>iOS中只有主线程才能立即刷新UI。在子线程中是不能够更新UI，我们看到的子线程能够更新UI的原因是，等到子线程执行完毕，自动进入了主线程去执行子线程中更新UI的代码。由于子线程执行时间非常短暂，让我们误以为子线程可以更新UI。如果子线程一直在运行，则无法更新UI，因为没有办法进入主线程。</p></blockquote><p>###block有几种，底层实现，以及如何持有外部变量的</p><blockquote><p>block是封装了函数调用以及函数调用环境的OC对象<br>block 有三种类型分别如下</p></blockquote><figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf">•<span class="hljs-variable">__NSGlobalBlock</span>  <br>•<span class="hljs-variable">__NSStackBlock</span>  <br>•<span class="hljs-variable">__NSMallocBlock</span>  <br></code></pre></td></tr></table></figure><blockquote><p>只要没有访问 auto的变量 都是 <strong>NSGlobalBlock</strong></p><p>访问了auto变量 但是没有调用 copy  都是  <strong>NSStackBlock</strong></p><p>即访问了auto变量又调用了copy 则是  <strong>NSMallocBlock</strong></p><p>注意：__NSGlobalBlock__即使调用了copy 它还是 <strong>NSGlobalBlock</strong><br>             __NSStackBlock__调用了 copy 它就变成了  <strong>NSMallocBlock</strong><br>             <strong>NSMallocBlock</strong> 调用了copy 只是使引用计数增加 其类型还是 <strong>NSMallocBlock</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="iOS面试" scheme="https://herohuqinchao.github.io/categories/iOS%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="OC" scheme="https://herohuqinchao.github.io/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>个人Blog使用</title>
    <link href="https://herohuqinchao.github.io/post/1750059094/"/>
    <id>https://herohuqinchao.github.io/post/1750059094/</id>
    <published>2022-03-09T12:00:32.000Z</published>
    <updated>2022-03-16T01:47:13.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>1.安装node.js<br>2.安装hexo<br>3.安装git（选择性安装，因为hexo有插件可以直接上传Github）<br>4.一个Github账号用于创建库</p><h2 id="需具备基础"><a href="#需具备基础" class="headerlink" title="需具备基础"></a>需具备基础</h2><p>1.html<br>2.css<br>3.markdown（主要写文章的标记语言，编写方便）</p><h2 id="创建一个Github库"><a href="#创建一个Github库" class="headerlink" title="创建一个Github库"></a>创建一个Github库</h2><p>在Github中创建一个库，其中Repository name将会影响到后续网页的上传，请慎重填写。</p><p>创建完库后的https链接记下来，后续上传网页将会用到</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>进入<a href="https://nodejs.org/">https://nodejs.org/</a></p><p>LTS:长期服务，较为稳定<br>Current:最新版本<br>建议下载LTS版本，搭建网站以稳为主。</p><p>可以选择直接下载安装包下载，也可以用指令搭配其他环境下载<br><a href="https://nodejs.org/zh-tw/download/package-manager/">https://nodejs.org/zh-tw/download/package-manager/</a></p><p>安装完后，检查node.js版本验证是否成功安装</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">npm -v  <span class="hljs-comment">#检查npm版本号</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>  <span class="hljs-comment">#检查node.js版本号</span><br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo必须在具备node.js的环境中运行，所以必须执行上一步<br>在命令行中执行</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g  <span class="hljs-meta">#安装Hexo本体</span><br></code></pre></td></tr></table></figure><h2 id="创建第一个网页"><a href="#创建第一个网页" class="headerlink" title="创建第一个网页"></a>创建第一个网页</h2><p>初始化Hexo用于创建第一个页面</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span>  <span class="hljs-meta">#初始化Hexo</span><br></code></pre></td></tr></table></figure><p>hexo init的后面也可以加一个文件夹名字用于创建一个新的空文件夹，比如在后面加一个blog，如果文件夹不是空的，hexo将初始化失败。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog  <span class="hljs-meta">#在blog文件夹初始化Hexo</span><br></code></pre></td></tr></table></figure><h2 id="写第一篇文章"><a href="#写第一篇文章" class="headerlink" title="写第一篇文章"></a>写第一篇文章</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>&lt;tittle&gt; <span class="hljs-meta">#创建一个新页面，&lt;   &gt;内为文章标题</span><br></code></pre></td></tr></table></figure><p>如果你的主题有默认布局，则可以加上layout生成默认布局的页面</p><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="测试和编译"><a href="#测试和编译" class="headerlink" title="测试和编译"></a>测试和编译</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo s  <span class="hljs-meta">#启用服务，http:<span class="hljs-comment">//localhost:4000/ 为默认地址</span></span><br></code></pre></td></tr></table></figure><h2 id="上传网页"><a href="#上传网页" class="headerlink" title="上传网页"></a>上传网页</h2><p>在不使用git的情况下，单纯靠Hexo上传网页，需要先安装Hexo内的一个插件</p><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git --save  <span class="hljs-comment">#安装hexo-deployer-git</span><br></code></pre></td></tr></table></figure><p>安装完成后需到hexo的_config.yml配置文件进行GitHub库的设定</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span>  <span class="hljs-comment">#如果是上传到git，type类型填git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;https://github.com/username/blog.git&#x27;</span>  <span class="hljs-comment">#这边填写的就是你创建完库后的http链接，直接复制粘贴即可。username填你的名字，blog是你的库，如果你的库就是你的名字则不需要username后面的内容，但最后都加.git</span><br>  <span class="hljs-attr">brach:</span> <span class="hljs-string">&#x27;gh-pages&#x27;</span>  <span class="hljs-comment">#这边是你库的分支，选择你想上传的就好，一般填gh-pages</span><br></code></pre></td></tr></table></figure><p>清除本地文件</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> cl  <span class="hljs-comment">#清除本地文件</span><br></code></pre></td></tr></table></figure><p>编译生成静态网页文件</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g  <span class="hljs-comment">#编译生成静态网页文件</span><br></code></pre></td></tr></table></figure><p>将编译完成的静态文件上传至Github</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> d  <span class="hljs-comment">#上传至Github,第一次上传会要求登入账号</span><br></code></pre></td></tr></table></figure><p>之后就完成啦～你的网站已经可以在Github上正常使用了～</p><h2 id="推荐使用软件"><a href="#推荐使用软件" class="headerlink" title="推荐使用软件"></a>推荐使用软件</h2><p>1.Typora<br>Markdown语言的编辑器，可以很轻易的编写内容</p><p>2.Visual Studio Code<br>微软出品的编辑器，前端必备</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习日常" scheme="https://herohuqinchao.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="博客" scheme="https://herohuqinchao.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
